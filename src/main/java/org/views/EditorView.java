/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package org.views;

import java.io.File;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.FileFilter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.imageio.ImageIO;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.geom.AffineTransform;
import org.utils.BMPtoJPEGImage;
import org.utils.JPEGHandler;
import org.utils.JPEGtoBMPImage;
import org.utils.BmpHandlerCopy;
import org.utils.JPEGImageHandlerBN;
import org.utils.JPEGImageHandlerColors;
import org.utils.JPEGImageHandlerRotator;

/**
 *
 * @author DELL
 */
public class EditorView extends javax.swing.JFrame {

    private File uploadedImage = null;

    /**
     * Creates new form EditorView
     */
    public EditorView() {
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        editionOptionsButtonGroup = new javax.swing.ButtonGroup();
        jLabel3 = new javax.swing.JLabel();
        routeImageLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jpegToBMPRadioButton = new javax.swing.JRadioButton();
        jpegCopyRadioButton = new javax.swing.JRadioButton();
        modifyImageRadioButton = new javax.swing.JRadioButton();
        redGreenBlueSepiaRadioButton = new javax.swing.JRadioButton();
        blackAndWhiteRadioButton = new javax.swing.JRadioButton();
        runOptionButton = new javax.swing.JButton();
        selectImageButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        imageLabel = new javax.swing.JLabel();
        goBackToMenuButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel3.setFont(new java.awt.Font("Yu Gothic UI", 1, 22)); // NOI18N
        jLabel3.setText("Editor");

        routeImageLabel.setText("No image");

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        editionOptionsButtonGroup.add(jpegToBMPRadioButton);
        jpegToBMPRadioButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jpegToBMPRadioButton.setSelected(true);
        jpegToBMPRadioButton.setLabel("JPG/JPEG a BMP y viceversa");
        jpegToBMPRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jpegToBMPRadioButtonActionPerformed(evt);
            }
        });

        editionOptionsButtonGroup.add(jpegCopyRadioButton);
        jpegCopyRadioButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jpegCopyRadioButton.setText("copia JPEG");
        jpegCopyRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jpegCopyRadioButtonActionPerformed(evt);
            }
        });

        editionOptionsButtonGroup.add(modifyImageRadioButton);
        modifyImageRadioButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        modifyImageRadioButton.setText("Modificar Imagen");
        modifyImageRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyImageRadioButtonActionPerformed(evt);
            }
        });

        editionOptionsButtonGroup.add(redGreenBlueSepiaRadioButton);
        redGreenBlueSepiaRadioButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        redGreenBlueSepiaRadioButton.setText("Rojo Verde Azul Sepia");
        redGreenBlueSepiaRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redGreenBlueSepiaRadioButtonActionPerformed(evt);
            }
        });

        editionOptionsButtonGroup.add(blackAndWhiteRadioButton);
        blackAndWhiteRadioButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        blackAndWhiteRadioButton.setText("Blanco y negro");
        blackAndWhiteRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blackAndWhiteRadioButtonActionPerformed(evt);
            }
        });

        runOptionButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        runOptionButton.setText("Ejecutar");
        runOptionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runOptionButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jpegCopyRadioButton)
                            .addComponent(modifyImageRadioButton)
                            .addComponent(blackAndWhiteRadioButton)
                            .addComponent(jpegToBMPRadioButton)
                            .addComponent(redGreenBlueSepiaRadioButton)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(112, 112, 112)
                        .addComponent(runOptionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(133, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jpegToBMPRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpegCopyRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(redGreenBlueSepiaRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(modifyImageRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(blackAndWhiteRadioButton)
                .addGap(28, 28, 28)
                .addComponent(runOptionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        selectImageButton.setText("Seleccionar Imagen");
        selectImageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectImageButtonActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(imageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 334, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(imageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        goBackToMenuButton.setText("Regresar al men√∫");
        goBackToMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goBackToMenuButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(routeImageLabel)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(385, 385, 385)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 226, Short.MAX_VALUE)
                .addComponent(goBackToMenuButton)
                .addGap(29, 29, 29))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(selectImageButton)
                .addGap(157, 157, 157))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(jLabel3)
                        .addGap(45, 45, 45))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(goBackToMenuButton)
                        .addGap(49, 49, 49)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addComponent(routeImageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(selectImageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void selectImageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectImageButtonActionPerformed
        JFileChooser jfc = new JFileChooser();
        jfc.setFileFilter(new FileNameExtensionFilter("JPEG, JPG y BMP images", "jpg", "jpeg", "bmp"));
        int respuesta = jfc.showOpenDialog(this);

        if (respuesta == JFileChooser.APPROVE_OPTION) {
            File file = jfc.getSelectedFile();
            uploadedImage = file;
            routeImageLabel.setText(file.getAbsolutePath());
            String extension = uploadedImage.getName().substring(uploadedImage.getName().lastIndexOf(".") + 1);

            if ("bmp".equals(extension)) {
                BufferedImage bmpImage = null;

                try {
                    bmpImage = ImageIO.read(file);
                } catch (IOException e) {
                    e.printStackTrace();
                }

                ImageIcon bmpIcon = new ImageIcon(bmpImage);
                Image image = bmpIcon.getImage().getScaledInstance(imageLabel.getWidth(), imageLabel.getHeight(), Image.SCALE_SMOOTH);
                imageLabel.setIcon(new ImageIcon(image));
            } else {
                ImageIcon imageIcon = new ImageIcon(file.getPath());
                Image image = imageIcon.getImage().getScaledInstance(imageLabel.getWidth(), imageLabel.getHeight(), Image.SCALE_SMOOTH);
                imageLabel.setIcon(new ImageIcon(image));
            }
        }
    }//GEN-LAST:event_selectImageButtonActionPerformed

    private void jpegToBMPRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jpegToBMPRadioButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jpegToBMPRadioButtonActionPerformed

    private void jpegCopyRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jpegCopyRadioButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jpegCopyRadioButtonActionPerformed

    private void modifyImageRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyImageRadioButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_modifyImageRadioButtonActionPerformed

    private void redGreenBlueSepiaRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redGreenBlueSepiaRadioButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_redGreenBlueSepiaRadioButtonActionPerformed

    private void blackAndWhiteRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blackAndWhiteRadioButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_blackAndWhiteRadioButtonActionPerformed

    private void goBackToMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goBackToMenuButtonActionPerformed
        MenuView mv = new MenuView();
        mv.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_goBackToMenuButtonActionPerformed

    private void runOptionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runOptionButtonActionPerformed
        // TODO: Separar estos m√©todos en clases

        if (uploadedImage != null) {
            if (jpegToBMPRadioButton.isSelected()) {
                JFileChooser jfc = new JFileChooser();
                jfc.setDialogTitle("Seleccione d√≥nde quiere guardar la imagen");
                jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
                int result = jfc.showOpenDialog(null);

                if (result == JFileChooser.APPROVE_OPTION) {
                    String extension = uploadedImage.getName().substring(uploadedImage.getName().lastIndexOf(".") + 1);

                    try {
                        if ("bmp".equals(extension)) {
                            BMPtoJPEGImage btj = new BMPtoJPEGImage(jfc.getSelectedFile().getAbsolutePath());
                            btj.setUploadedImage(uploadedImage);
                            JPEGHandler.runHandler(btj);
                        } else {
                            JPEGtoBMPImage jtb = new JPEGtoBMPImage(jfc.getSelectedFile().getAbsolutePath());
                            jtb.setUploadedImage(uploadedImage);
                            JPEGHandler.runHandler(jtb);
                        }
                        
                        JOptionPane.showMessageDialog(null, "El archivo ha sido convertido con √©xito! \nPuedes ir a checarlo");
                    } catch (Exception ex) {
                        Logger.getLogger(EditorView.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

            }

            if (jpegCopyRadioButton.isSelected()) {
                JFileChooser jfc = new JFileChooser();
                jfc.setDialogTitle("Seleccione d√≥nde quiere guardar la imagen");
                jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
                int result = jfc.showOpenDialog(null);
                
                if (result == JFileChooser.APPROVE_OPTION) {
                    String extension = uploadedImage.getName().substring(uploadedImage.getName().lastIndexOf(".") + 1);

                    try {
                        if ("bmp".equals(extension)) {
                            JOptionPane.showMessageDialog(null, "Error: Debe de subir una imagen JPG", "Error", JOptionPane.ERROR_MESSAGE);
                        } else {
                            JPEGtoBMPImage jtb = new JPEGtoBMPImage(jfc.getSelectedFile().getAbsolutePath());
                            jtb.setUploadedImage(uploadedImage);
                            jtb.setIsForMethod(true);
                            System.out.println("Convirtiedo imagen a BMP...");
                            JPEGHandler.runHandler(jtb);
                            
                            System.out.println("Realizando copia de imagen...");
                            JPEGHandler.runHandler(new BmpHandlerCopy(jfc.getSelectedFile().getAbsolutePath() + "\\" + jtb.getGeneratedId() + "-" + uploadedImage.getName()));
                            
                            System.out.println("Convirtiendo imagen generada a JPG...");
                            BMPtoJPEGImage btj = new BMPtoJPEGImage(jfc.getSelectedFile().getAbsolutePath());
                            btj.setUploadedImage(new File("..\\rubbish_images\\" + jtb.getGeneratedId() + "-" + uploadedImage.getName()));
                            JPEGHandler.runHandler(btj);
                            
                            JOptionPane.showMessageDialog(null, "El archivo se ha copiado con √©xito! \nPuedes ir a checarlo");
                        }
                    } catch (Exception ex) {
                        Logger.getLogger(EditorView.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }

            if (redGreenBlueSepiaRadioButton.isSelected()) {
                String extension = uploadedImage.getName().substring(uploadedImage.getName().lastIndexOf(".") + 1);

                if ("bmp".equals(extension)) {
                    JOptionPane.showMessageDialog(null, "Error: Debe de subir una imagen JPG", "Error", JOptionPane.ERROR_MESSAGE);
                } else {
                    try {
                        JFileChooser jfc = new JFileChooser();
                        jfc.setDialogTitle("Seleccione d√≥nde quiere guardar las 4 im√°genes");
                        jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
                        int result = jfc.showOpenDialog(null);

                        if (result == JFileChooser.APPROVE_OPTION) {
                            
                            JPEGtoBMPImage jtb = new JPEGtoBMPImage(jfc.getSelectedFile().getAbsolutePath());
                            jtb.setUploadedImage(uploadedImage);
                            jtb.setIsForMethod(true);
                            System.out.println("Convirtiedo imagen a BMP...");
                            JPEGHandler.runHandler(jtb);
                            
                            System.out.println("Realizando conversi√≥n de colores a imagen...");
                            JPEGHandler.runHandler(new JPEGImageHandlerColors(jfc.getSelectedFile().getAbsolutePath() + "\\" + jtb.getGeneratedId() + "-" + uploadedImage.getName()));
                            
                            System.out.println("Convirtiendo imagen generada a JPG...");
                            BMPtoJPEGImage btj = new BMPtoJPEGImage(jfc.getSelectedFile().getAbsolutePath());
                            btj.setUploadedImage(new File("..\\rubbish_images\\" + jtb.getGeneratedId() + "-" + uploadedImage.getName()));
                            JPEGHandler.runHandler(btj);
                            
                            JOptionPane.showMessageDialog(null, "El archivo ha sido convertido con √©xito! \nPuedes ir a checar las 4 im√°genes");
                        }
                    } catch (Exception ex) {
                        Logger.getLogger(EditorView.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }

            if (modifyImageRadioButton.isSelected()) {
                String extension = uploadedImage.getName().substring(uploadedImage.getName().lastIndexOf(".") + 1);

                if ("bmp".equals(extension)) {
                    JOptionPane.showMessageDialog(null, "Error: Debe de subir una imagen JPG", "Error", JOptionPane.ERROR_MESSAGE);
                } else {
                    try {
                        JFileChooser jfc = new JFileChooser();
                        jfc.setDialogTitle("Seleccione d√≥nde quiere guardar las 2 im√°genes");
                        jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
                        int result = jfc.showOpenDialog(null);

                        if (result == JFileChooser.APPROVE_OPTION) {
                            JPEGtoBMPImage jtb = new JPEGtoBMPImage(jfc.getSelectedFile().getAbsolutePath());
                            jtb.setUploadedImage(uploadedImage);
                            jtb.setIsForMethod(true);
                            System.out.println("Convirtiedo imagen a BMP...");
                            JPEGHandler.runHandler(jtb);
                            
                            System.out.println("Realizando conversi√≥n de rotaci√≥n de imagen...");
                            JPEGHandler.runHandler(new JPEGImageHandlerRotator(jfc.getSelectedFile().getAbsolutePath() + "\\" + jtb.getGeneratedId() + "-" + uploadedImage.getName()));
                            
                            System.out.println("Convirtiendo imagen generada a JPG...");
                            BMPtoJPEGImage btj = new BMPtoJPEGImage(jfc.getSelectedFile().getAbsolutePath());
                            btj.setUploadedImage(new File("..\\rubbish_images\\" + jtb.getGeneratedId() + "-" + uploadedImage.getName()));
                            JPEGHandler.runHandler(btj);

                            JOptionPane.showMessageDialog(null, "El archivo ha sido convertido con √©xito! \nPuedes ir a checar las 2 im√°genes");
                        }
                    } catch (Exception ex) {
                        Logger.getLogger(EditorView.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

            }

            if (blackAndWhiteRadioButton.isSelected()) {
                String extension = uploadedImage.getName().substring(uploadedImage.getName().lastIndexOf(".") + 1);

                if ("bmp".equals(extension)) {
                    JOptionPane.showMessageDialog(null, "Error: Debe de subir una imagen JPG", "Error", JOptionPane.ERROR_MESSAGE);
                } else {
                    try {
                        JFileChooser jfc = new JFileChooser();
                        jfc.setDialogTitle("Seleccione d√≥nde quiere guardar las 4 im√°genes");
                        jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
                        int result = jfc.showOpenDialog(null);

                        if (result == JFileChooser.APPROVE_OPTION) {
                            BufferedImage imagen = ImageIO.read(uploadedImage);

                            JPEGtoBMPImage jtb = new JPEGtoBMPImage(jfc.getSelectedFile().getAbsolutePath());
                            jtb.setUploadedImage(uploadedImage);
                            jtb.setIsForMethod(true);
                            System.out.println("Convirtiedo imagen a BMP...");
                            JPEGHandler.runHandler(jtb);
                            
                            System.out.println("Realizando conversi√≥n de blanco y negro de imagen...");
                            JPEGHandler.runHandler(new JPEGImageHandlerBN(jfc.getSelectedFile().getAbsolutePath() + "\\" + jtb.getGeneratedId() + "-" + uploadedImage.getName()));
                            
                            System.out.println("Convirtiendo imagen generada a JPG...");
                            BMPtoJPEGImage btj = new BMPtoJPEGImage(jfc.getSelectedFile().getAbsolutePath());
                            btj.setUploadedImage(new File("..\\rubbish_images\\" + jtb.getGeneratedId() + "-" + uploadedImage.getName()));
                            JPEGHandler.runHandler(btj);
                            
                            JOptionPane.showMessageDialog(null, "El archivo ha sido convertido con √©xito! \nPuedes ir a checarla");
                        }
                    } catch (Exception ex) {
                        Logger.getLogger(EditorView.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Error: Debe de subir primero una imagen", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_runOptionButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EditorView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EditorView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EditorView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EditorView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EditorView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton blackAndWhiteRadioButton;
    private javax.swing.ButtonGroup editionOptionsButtonGroup;
    private javax.swing.JButton goBackToMenuButton;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JRadioButton jpegCopyRadioButton;
    private javax.swing.JRadioButton jpegToBMPRadioButton;
    private javax.swing.JRadioButton modifyImageRadioButton;
    private javax.swing.JRadioButton redGreenBlueSepiaRadioButton;
    private javax.swing.JLabel routeImageLabel;
    private javax.swing.JButton runOptionButton;
    private javax.swing.JButton selectImageButton;
    // End of variables declaration//GEN-END:variables
}
